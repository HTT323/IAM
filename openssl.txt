
>> Generate key and cert (using git bash)

openssl req -config bridges.conf -new -x509 -newkey rsa:2048 -extensions 'server exts' -nodes -keyout localhost.key.pem -days 3650 -out localhost.cert.pem

openssl req -config bridges.conf -new -x509 -newkey rsa:2048 -nodes -keyout localhost.key.pem -days 3650 -out localhost.cert.pem

>> Export to PFX (using git bash)

winpty openssl pkcs12 -inkey localhost.key.pem -in localhost.cert.pem -export -out localhost.pfx -passout pass:qwerty123



>> Replace IIS Express SSL (using cmd prompt)

for /L %i in (44300,1,44399) do netsh http delete sslcert ipport=0.0.0.0:%i

>> Set IIS Express SSL (using cmd prompt)

for /L %i in (44300,1,44399) do netsh http add sslcert ipport=0.0.0.0:%i certhash=514df0c5ad4f3b3447f102949ced0cf333d18e3c appid={16197399-2854-4702-acb7-e0b12999ac5a}

-------------------

[ req ]
default_bits        = 2048
default_keyfile     = server-key.pem
distinguished_name  = subject
req_extensions      = req_ext
x509_extensions     = x509_ext
string_mask         = utf8only

# The Subject DN can be formed using X501 or RFC 4514 (see RFC 4519 for a description).
#   Its sort of a mashup. For example, RFC 4514 does not provide emailAddress.
[ subject ]
countryName         = Country Name (2 letter code)
countryName_default     = US

stateOrProvinceName     = State or Province Name (full name)
stateOrProvinceName_default = NY

localityName            = Locality Name (eg, city)
localityName_default        = New York

organizationName         = Organization Name (eg, company)
organizationName_default    = Example, LLC

# Use a friendly name here because its presented to the user. The server's DNS
#   names are placed in Subject Alternate Names. Plus, DNS names here is deprecated
#   by both IETF and CA/Browser Forums. If you place a DNS name here, then you 
#   must include the DNS name in the SAN too (otherwise, Chrome and others that
#   strictly follow the CA/Browser Baseline Requirements will fail).
commonName          = Common Name (e.g. server FQDN or YOUR name)
commonName_default      = Example Company

emailAddress            = Email Address
emailAddress_default        = test@example.com

# Section x509_ext is used when generating a self-signed certificate. I.e., openssl req -x509 ...
[ x509_ext ]

subjectKeyIdentifier        = hash
authorityKeyIdentifier  = keyid,issuer

# You only need digitalSignature below. *If* you don't allow
#   RSA Key transport (i.e., you use ephemeral cipher suites), then
#   omit keyEncipherment because that's key transport.
basicConstraints        = CA:FALSE
keyUsage            = digitalSignature, keyEncipherment
subjectAltName          = @alternate_names
nsComment           = "OpenSSL Generated Certificate"

# RFC 5280, Section 4.2.1.12 makes EKU optional
#   CA/Browser Baseline Requirements, Appendix (B)(3)(G) makes me confused
#   In either case, you probably only need serverAuth.
# extendedKeyUsage  = serverAuth, clientAuth

# Section req_ext is used when generating a certificate signing request. I.e., openssl req ...
[ req_ext ]

subjectKeyIdentifier        = hash

basicConstraints        = CA:FALSE
keyUsage            = digitalSignature, keyEncipherment
subjectAltName          = @alternate_names
nsComment           = "OpenSSL Generated Certificate"

# RFC 5280, Section 4.2.1.12 makes EKU optional
#   CA/Browser Baseline Requirements, Appendix (B)(3)(G) makes me confused
#   In either case, you probably only need serverAuth.
# extendedKeyUsage  = serverAuth, clientAuth

[ alternate_names ]

DNS.1       = iam.dev
DNS.2       = www.iam.dev
DNS.3       = mail.iam.dev
DNS.4       = ftp.iam.dev
DNS.5       = localhost

# IPv6 localhost
# DNS.8     = ::1

[ server exts ]
extendedKeyUsage = 1.3.6.1.5.5.7.3.1
